// C·∫•u h√¨nh ·ª©ng d·ª•ng
const EMOTIONS = {
  happy: { icon: "far fa-laugh-beam", name: "Vui v·∫ª", color: "#4CAF50" },
  sad: { icon: "far fa-sad-tear", name: "Bu·ªìn", color: "#2196F3" },
  angry: { icon: "far fa-angry", name: "Gi·∫≠n d·ªØ", color: "#F44336" },
  normal: { icon: "far fa-meh", name: "B√¨nh th∆∞·ªùng", color: "#E91E63" },
  awful: { icon: "far fa-frown", name: "T·ªìi t·ªá", color: "#9C27B0" },
};

// T·ª´ng l·ªùi n√≥i cho c·∫£m x√∫c
const EMOTION_MESSAGES = {
  happy: [
    "Th·∫≠t tuy·ªát! H√£y gi·ªØ v·ªØng nƒÉng l∆∞·ª£ng t√≠ch c·ª±c nh√©! üòä",
    "M·ªôt ng√†y tr√†n ƒë·∫ßy ni·ªÅm vui! Ti·∫øp t·ª•c lan to·∫£ nh√©!",
    "B·∫°n ƒëang l√†m r·∫•t t·ªët, h√£y m·ªâm c∆∞·ªùi nhi·ªÅu h∆°n n·ªØa! üåà",
  ],
  sad: [
    "H√£y c·ªë g·∫Øng l√™n, m·ªçi chuy·ªán r·ªìi s·∫Ω ·ªïn. ü§ó",
    "B·∫°n kh√¥ng c√¥ ƒë∆°n ƒë√¢u. Lu√¥n c√≥ ng∆∞·ªùi b√™n b·∫°n.",
    "Bu·ªìn l√† m·ªôt ph·∫ßn c·ªßa cu·ªôc s·ªëng. H√£y nh·∫π nh√†ng v·ªõi ch√≠nh m√¨nh nh√©!",
  ],
  angry: [
    "Th∆∞ gi√£n m·ªôt ch√∫t nh√©. H√£y h√≠t s√¢u v√† th·ªü ra th·∫≠t ch·∫≠m.",
    "Gi·∫≠n c≈©ng ƒë∆∞·ª£c, nh∆∞ng ƒë·ª´ng qu√™n y√™u th∆∞∆°ng b·∫£n th√¢n m√¨nh.",
    "M·ªçi chuy·ªán r·ªìi s·∫Ω tr√¥i qua. B·∫°n s·∫Ω ·ªïn th√¥i!",
  ],
  awful: [
    "H√¥m nay th·∫≠t t·ªìi t·ªá ƒë√∫ng kh√¥ng? Nh∆∞ng ng√†y mai s·∫Ω kh√°c!",
    "H√£y d√†nh th·ªùi gian ngh·ªâ ng∆°i v√† y√™u th∆∞∆°ng b·∫£n th√¢n.",
    "B·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ© ƒë·∫•y!",
  ],
  normal: [
    "M·ªôt ng√†y b√¨nh th∆∞·ªùng c≈©ng r·∫•t ƒë√°ng tr√¢n tr·ªçng. ‚òÅÔ∏è",
    "B√¨nh y√™n l√† m√≥n qu√† tuy·ªát v·ªùi nh·∫•t!",
    "Kh√¥ng sao c·∫£, c·ª© nh·∫π nh√†ng tr√¥i theo ng√†y h√¥m nay nh√©.",
  ],
};

// D·ªØ li·ªáu ·ª©ng d·ª•ng
let emotionHistory = JSON.parse(localStorage.getItem("emotionHistory")) || [];
let appState = JSON.parse(localStorage.getItem("appState")) || {
  person1: [],
  person2: [],
};

// Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì v·ªõi chi·ªÅu cao c·ªë ƒë·ªãnh
const emotionChart = new Chart(document.getElementById("emotionChart"), {
  type: "bar",
  data: {
    labels: Object.values(EMOTIONS).map((e) => e.name),
    datasets: [
      {
        label: "T·ªâ l·ªá c·∫£m x√∫c (%)",
        data: [25, 15, 10, 30, 20],
        backgroundColor: Object.values(EMOTIONS).map((e) => e.color),
        borderWidth: 0,
        barThickness: 25,
      },
    ],
  },
  options: {
    indexAxis: "y",
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
    },
    scales: {
      x: {
        beginAtZero: true,
        max: 100,
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 12,
          },
        },
      },
      y: {
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 12,
          },
        },
      },
    },
    animation: {
      duration: 1000,
      easing: "easeOutQuart",
    },
  },
});

// T·∫°o hi·ªáu ·ª©ng particle background
function createParticles(emotion) {
  const container = document.body;

  const emojiMap = {
    happy: "‚ù§Ô∏è",
    sad: "üíß",
    angry: "üî•",
    normal: "‚òÅÔ∏è",
    awful: "üíî",
  };

  const icon = emojiMap[emotion] || "‚ú®";

  for (let i = 0; i < 20; i++) {
    const particle = document.createElement("div");
    particle.classList.add("particle");
    particle.innerHTML = icon;

    // V·ªã tr√≠ & hi·ªáu ·ª©ng ng·∫´u nhi√™n
    const scale = Math.random() * 0.6 + 0.8;
    particle.style.transform = `scale(${scale})`;
    particle.style.left = `${Math.random() * 100}%`;
    particle.style.top = `${Math.random() * 100}%`;
    particle.style.animationDuration = `${Math.random() * 20 + 10}s`;

    container.appendChild(particle);

    // T·ª± xo√° sau 15‚Äì30s
    setTimeout(() => {
      particle.remove();
    }, 20000);
  }
}

// C·∫≠p nh·∫≠t giao di·ªán khi t·∫£i trang
function updateUI() {
  // C·∫≠p nh·∫≠t b√¨nh c·∫£m x√∫c
  updateJar("person1", appState.person1);
  updateJar("person2", appState.person2);
  renderHistory();
}

// C·∫≠p nh·∫≠t n·ªôi dung b√¨nh c·∫£m x√∫c
function updateJar(personId, emotions) {
  const jarContent = document.getElementById(
    `jar-content${personId === "person1" ? "1" : "2"}`
  );
  jarContent.innerHTML = "";

  if (emotions.length === 0) {
    jarContent.innerHTML =
      '<div class="empty-message">Ch∆∞a c√≥ c·∫£m x√∫c n√†o</div>';
    return;
  }

  // Hi·ªÉn th·ªã c√°c c·∫£m x√∫c trong b√¨nh
  const lastEmotions = emotions.slice(-30);
  lastEmotions.forEach((emotion) => {
    const emotionEl = document.createElement("div");
    emotionEl.className = "emotion-item";
    emotionEl.innerHTML = `<i class="${EMOTIONS[emotion].icon}"></i>`;
    jarContent.appendChild(emotionEl);
    setTimeout(() => {
      jarContent.scrollTop = jarContent.scrollHeight;
    }, 0);
  });
}

// Th√™m c·∫£m x√∫c v√†o b√¨nh
function addEmotionToJar(personId, emotion) {
  const now = new Date();
  const todayKey = now.toISOString().slice(0, 10);

  // Ki·ªÉm tra xem ng∆∞·ªùi n√†y ƒë√£ ghi h√¥m nay ch∆∞a
  const alreadyLogged = emotionHistory.some(
    (entry) =>
      entry.person === personId &&
      new Date(entry.timestamp).toISOString().slice(0, 10) === todayKey
  );

  if (alreadyLogged) {
    alert(
      "B·∫°n ƒë√£ ghi nh·∫≠n c·∫£m x√∫c h√¥m nay r·ªìi üòä\nH√£y quay l·∫°i v√†o ng√†y mai nh√©!"
    );
    return;
  }
  let reason = prompt("H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø v√¨ l√Ω do g√¨?");
  if (reason === null || reason.trim() === "") {
    alert(
      "B·∫°n ch∆∞a nh·∫≠p l√Ω do. Vui l√≤ng nh·∫≠p l√Ω do ƒë·ªÉ ghi nh·∫≠n c·∫£m x√∫c c·ªßa b·∫°n."
    );
    return;
  }
  reason = reason.trim();

  // Ghi c·∫£m x√∫c m·ªõi
  emotionHistory.push({
    person: personId,
    emotion: emotion,
    timestamp: now.getTime(),
    reason: reason,
  });

  // C·∫≠p nh·∫≠t appState v·ªõi 1 c·∫£m x√∫c/ng√†y
  const perDayMap = {};
  const filtered = emotionHistory
    .filter((e) => e.person === personId)
    .sort((a, b) => a.timestamp - b.timestamp);

  filtered.forEach((entry) => {
    const date = new Date(entry.timestamp).toISOString().slice(0, 10);
    perDayMap[date] = entry.emotion;
  });

  appState[personId] = Object.values(perDayMap).slice(-31);

  // ‚úÖ N·∫øu ƒë√£ ƒë·ªß 30 ng√†y, th√¨ reset s·∫°ch cho ng∆∞·ªùi ƒë√≥
  if (appState[personId].length >= 30) {
    alert(
      "B·∫°n ƒë√£ ho√†n th√†nh 30 ng√†y c·∫£m x√∫c! üéâ B√¨nh s·∫Ω ƒë∆∞·ª£c l√†m m·ªõi t·ª´ h√¥m nay."
    );
    appState[personId] = [];
    emotionHistory = emotionHistory.filter(
      (entry) => entry.person !== personId
    );
  }

  // C·∫≠p nh·∫≠t l·∫°i giao di·ªán v√† l∆∞u
  createFallingEmotion(emotion, personId);
  createParticles(emotion);
  // Hi·ªán th·ªã l·ªùi n√≥i ph√π h·ª£p vs c·∫£m x√∫c
  const message = EMOTION_MESSAGES[emotion];
  if (message && message.length > 0) {
    const randomMsg = message[Math.floor(Math.random() * message.length)];
    setTimeout(() => {
      alert(randomMsg);
    }, 300);
  }
  saveData();
  updateJar(personId, appState[personId]);
  renderHistory();
}

// T·∫°o hi·ªáu ·ª©ng c·∫£m x√∫c r∆°i
function createFallingEmotion(emotion, personId) {
  const emotionEl = document.createElement("div");
  emotionEl.className = "falling-emotion";
  emotionEl.innerHTML = `<i class="${EMOTIONS[emotion].icon}"></i>`;

  // T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu (ng·∫´u nhi√™n ·ªü tr√™n c√πng)
  const startX = Math.random() * window.innerWidth;
  emotionEl.style.left = `${startX}px`;
  emotionEl.style.top = "-50px";

  document.body.appendChild(emotionEl);

  // X√≥a sau khi animation k·∫øt th√∫c
  setTimeout(() => {
    emotionEl.remove();
  }, 1000);
}

// L∆∞u d·ªØ li·ªáu v√†o localStorage
function saveData() {
  localStorage.setItem("appState", JSON.stringify(appState));
  localStorage.setItem("emotionHistory", JSON.stringify(emotionHistory));
}

// T√≠nh to√°n th·ªëng k√™
function calculateStats(person, month) {
  // L·ªçc d·ªØ li·ªáu theo ng∆∞·ªùi v√† th√°ng
  const filtered = emotionHistory.filter((entry) => {
    const entryDate = new Date(entry.timestamp);
    return (
      (person === "both" ||
        (person === "person1" && entry.person === "person1") ||
        (person === "person2" && entry.person === "person2")) &&
      (month === null || entryDate.getMonth() === parseInt(month))
    );
  });

  // T√≠nh t·ªïng s·ªë c·∫£m x√∫c
  const total = filtered.length;
  if (total === 0) return null;

  // T√≠nh ph·∫ßn trƒÉm t·ª´ng c·∫£m x√∫c
  const stats = {};
  Object.keys(EMOTIONS).forEach((emotion) => {
    const count = filtered.filter((e) => e.emotion === emotion).length;
    stats[emotion] = Math.round((count / total) * 100);
  });

  return stats;
}

// C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
function updateCharts() {
  const person = document.getElementById("personSelect").value;
  const month = document.getElementById("monthSelect").value;

  const stats = calculateStats(person, month);

  if (!stats) {
    alert("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªëng k√™ cho l·ª±a ch·ªçn n√†y");
    return;
  }

  // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
  emotionChart.data.datasets[0].data = Object.values(stats);
  emotionChart.update();
}

// X·ª≠ l√Ω s·ª± ki·ªán khi t·∫£i trang
document.addEventListener("DOMContentLoaded", () => {
  createParticles();
  updateUI();

  // X·ª≠ l√Ω s·ª± ki·ªán n√∫t c·∫£m x√∫c
  document.querySelectorAll(".emotion-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const emotion = button.dataset.emotion;
      const personId = button.dataset.person;
      addEmotionToJar(personId, emotion);
    });
  });

  // X·ª≠ l√Ω n√∫t hi·ªÉn th·ªã th·ªëng k√™
  document.getElementById("showStats").addEventListener("click", updateCharts);

  // Thi·∫øt l·∫≠p th√°ng hi·ªán t·∫°i trong dropdown
  const currentMonth = new Date().getMonth();
  document.getElementById("monthSelect").value = currentMonth;

  // Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u ban ƒë·∫ßu
  if (emotionHistory.length === 0) {
    emotionChart.update();
  }
});

// X√≥a d·ªØ li·ªáu
document.getElementById("resetAll").addEventListener("click", () => {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô c·∫£m x√∫c v√† th·ªëng k√™?")) {
    // X√≥a d·ªØ li·ªáu trong b·ªô nh·ªõ
    appState = {
      person1: [],
      person2: [],
    };
    emotionHistory = [];

    // L∆∞u l·∫°i r·ªóng v√†o localStorage
    saveData();

    // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
    updateUI();
    renderHistory();

    // L√†m tr·ªëng bi·ªÉu ƒë·ªì
    emotionChart.data.datasets[0].data = [0, 0, 0, 0, 0];
    emotionChart.update();
  }
});

function renderHistory() {
  const container = document.getElementById("emotionHistoryList");
  container.innerHTML = "";

  if (emotionHistory.length === 0) {
    container.innerHTML =
      '<div class="empty-message">Ch∆∞a c√≥ bi·ªÉu c·∫£m n√†o</div>';
    return;
  }

  // Hi·ªÉn th·ªã t·ª´ m·ªõi nh·∫•t xu·ªëng c≈© h∆°n
  [...emotionHistory].reverse().forEach((entry) => {
    const emotion = EMOTIONS[entry.emotion];
    const time = new Date(entry.timestamp).toLocaleString("vi-VN");
    const who = entry.person === "person1" ? "Tr·∫ßn Nh·∫≠t Huy" : "ƒêinh Nh·∫•t Ng·ªçc";

    const div = document.createElement("div");
    div.className = "history-item";
    div.innerHTML = `
                    <i class="${emotion.icon}" style="color:${
      emotion.color
    }"></i>
                    <div>
                        <div><strong>${who}</strong> - ${
      emotion.name
    }</div>          
                        <div style="font-size: 0.85rem; color: #607d8b; margin-left: 20px;">
                            ${entry.reason || "<em>Kh√¥ng ghi l√Ω do</em>"}
                        </div>
                    </div>
                    <span class="time">${time}</span>
                `;
    container.appendChild(div);
  });
}
